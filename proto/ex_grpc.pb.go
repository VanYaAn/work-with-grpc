// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/ex.proto

package ex_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EXS_GetSingleInfo_FullMethodName = "/ex.EXS/GetSingleInfo"
	EXS_GetStreamInfo_FullMethodName = "/ex.EXS/GetStreamInfo"
)

// EXSClient is the client API for EXS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EXSClient interface {
	GetSingleInfo(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetStreamInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SimpleRequest, SimpleResponse], error)
}

type eXSClient struct {
	cc grpc.ClientConnInterface
}

func NewEXSClient(cc grpc.ClientConnInterface) EXSClient {
	return &eXSClient{cc}
}

func (c *eXSClient) GetSingleInfo(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, EXS_GetSingleInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eXSClient) GetStreamInfo(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SimpleRequest, SimpleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EXS_ServiceDesc.Streams[0], EXS_GetStreamInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SimpleRequest, SimpleResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EXS_GetStreamInfoClient = grpc.BidiStreamingClient[SimpleRequest, SimpleResponse]

// EXSServer is the server API for EXS service.
// All implementations must embed UnimplementedEXSServer
// for forward compatibility.
type EXSServer interface {
	GetSingleInfo(context.Context, *SimpleRequest) (*SimpleResponse, error)
	GetStreamInfo(grpc.BidiStreamingServer[SimpleRequest, SimpleResponse]) error
	mustEmbedUnimplementedEXSServer()
}

// UnimplementedEXSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEXSServer struct{}

func (UnimplementedEXSServer) GetSingleInfo(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleInfo not implemented")
}
func (UnimplementedEXSServer) GetStreamInfo(grpc.BidiStreamingServer[SimpleRequest, SimpleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamInfo not implemented")
}
func (UnimplementedEXSServer) mustEmbedUnimplementedEXSServer() {}
func (UnimplementedEXSServer) testEmbeddedByValue()             {}

// UnsafeEXSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EXSServer will
// result in compilation errors.
type UnsafeEXSServer interface {
	mustEmbedUnimplementedEXSServer()
}

func RegisterEXSServer(s grpc.ServiceRegistrar, srv EXSServer) {
	// If the following call pancis, it indicates UnimplementedEXSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EXS_ServiceDesc, srv)
}

func _EXS_GetSingleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EXSServer).GetSingleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EXS_GetSingleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EXSServer).GetSingleInfo(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EXS_GetStreamInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EXSServer).GetStreamInfo(&grpc.GenericServerStream[SimpleRequest, SimpleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EXS_GetStreamInfoServer = grpc.BidiStreamingServer[SimpleRequest, SimpleResponse]

// EXS_ServiceDesc is the grpc.ServiceDesc for EXS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EXS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ex.EXS",
	HandlerType: (*EXSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSingleInfo",
			Handler:    _EXS_GetSingleInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreamInfo",
			Handler:       _EXS_GetStreamInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/ex.proto",
}
